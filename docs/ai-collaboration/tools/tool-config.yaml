# Unified Tool Configuration System
# This file defines tool detection and usage rules for different project types

tools:
  package_managers:
    python:
      - name: "uv"
        command: "uv run"
        detection: ["pyproject.toml", "uv.lock"]
        priority: 1
        description: "Fast Python package manager"
        examples:
          - "uv run pytest"
          - "uv run ruff check"
          - "uv run mypy"
      - name: "poetry"
        command: "poetry run"
        detection: ["pyproject.toml", "poetry.lock"]
        priority: 2
        description: "Python dependency management"
        examples:
          - "poetry run pytest"
          - "poetry run black"
          - "poetry run isort"
      - name: "pip"
        command: "python -m"
        detection: ["requirements.txt", "setup.py"]
        priority: 3
        description: "Standard Python package manager"
        examples:
          - "python -m pytest"
          - "python -m black"
          - "python -m flake8"

    javascript:
      - name: "nx"
        command: "nx run"
        detection: ["nx.json", "workspace.json"]
        priority: 1
        description: "Nx monorepo build system"
        examples:
          - "nx test"
          - "nx lint"
          - "nx build"
          - "nx run project:target"
      - name: "npm"
        command: "npm run"
        detection: ["package.json"]
        priority: 2
        description: "Node.js package manager"
        examples:
          - "npm test"
          - "npm run lint"
          - "npm run build"
      - name: "yarn"
        command: "yarn"
        detection: ["yarn.lock", "package.json"]
        priority: 2
        description: "Fast Node.js package manager"
        examples:
          - "yarn test"
          - "yarn lint"
          - "yarn build"
      - name: "pnpm"
        command: "pnpm"
        detection: ["pnpm-lock.yaml", "package.json"]
        priority: 2
        description: "Efficient Node.js package manager"
        examples:
          - "pnpm test"
          - "pnpm lint"
          - "pnpm build"

    go:
      - name: "go"
        command: "go"
        detection: ["go.mod", "go.sum"]
        priority: 1
        description: "Go module system"
        examples:
          - "go test"
          - "go build"
          - "go run"

    rust:
      - name: "cargo"
        command: "cargo"
        detection: ["Cargo.toml", "Cargo.lock"]
        priority: 1
        description: "Rust package manager"
        examples:
          - "cargo test"
          - "cargo build"
          - "cargo clippy"

  build_tools:
    javascript:
      - name: "vite"
        detection: ["vite.config.js", "vite.config.ts"]
        description: "Fast build tool"
        examples:
          - "vite build"
          - "vite dev"
      - name: "webpack"
        detection: ["webpack.config.js", "webpack.config.ts"]
        description: "Module bundler"
        examples:
          - "webpack --mode production"
          - "webpack serve"
      - name: "rollup"
        detection: ["rollup.config.js", "rollup.config.ts"]
        description: "ES module bundler"
        examples:
          - "rollup -c"
      - name: "esbuild"
        detection: ["esbuild.config.js", "esbuild.config.ts"]
        description: "Extremely fast bundler"
        examples:
          - "esbuild src/index.js --bundle"

    python:
      - name: "setuptools"
        detection: ["setup.py", "setup.cfg"]
        description: "Python build system"
        examples:
          - "python setup.py build"
      - name: "hatch"
        detection: ["pyproject.toml"]
        description: "Modern Python project manager"
        examples:
          - "hatch build"
          - "hatch run test"

  test_frameworks:
    javascript:
      - name: "jest"
        detection: ["jest.config.js", "jest.config.ts"]
        description: "JavaScript testing framework"
        examples:
          - "jest"
          - "jest --watch"
      - name: "vitest"
        detection: ["vitest.config.js", "vitest.config.ts"]
        description: "Fast unit test framework"
        examples:
          - "vitest"
          - "vitest run"
      - name: "cypress"
        detection: ["cypress.config.js", "cypress.config.ts"]
        description: "End-to-end testing"
        examples:
          - "cypress run"
          - "cypress open"

    python:
      - name: "pytest"
        detection: ["pytest.ini", "pyproject.toml"]
        description: "Python testing framework"
        examples:
          - "pytest"
          - "pytest -v"
      - name: "unittest"
        detection: ["test_*.py", "*_test.py"]
        description: "Python built-in testing"
        examples:
          - "python -m unittest"

  lint_tools:
    javascript:
      - name: "eslint"
        detection: [".eslintrc.js", ".eslintrc.json", ".eslintrc.yml"]
        description: "JavaScript linter"
        examples:
          - "eslint src/"
          - "eslint --fix"
      - name: "prettier"
        detection: [".prettierrc", ".prettierrc.js", ".prettierrc.json"]
        description: "Code formatter"
        examples:
          - "prettier --write"
          - "prettier --check"
      - name: "stylelint"
        detection: [".stylelintrc", ".stylelintrc.js"]
        description: "CSS linter"
        examples:
          - "stylelint src/"

    python:
      - name: "ruff"
        detection: ["pyproject.toml", "ruff.toml"]
        description: "Fast Python linter"
        examples:
          - "ruff check"
          - "ruff format"
      - name: "black"
        detection: ["pyproject.toml", "setup.cfg"]
        description: "Python code formatter"
        examples:
          - "black ."
          - "black --check"
      - name: "flake8"
        detection: [".flake8", "setup.cfg"]
        description: "Python linter"
        examples:
          - "flake8"
      - name: "mypy"
        detection: ["mypy.ini", "pyproject.toml"]
        description: "Python type checker"
        examples:
          - "mypy src/"

  container_tools:
    - name: "docker"
      detection: ["Dockerfile", "docker-compose.yml", "docker-compose.yaml"]
      description: "Container platform"
      examples:
        - "docker build -t app ."
        - "docker run app"
    - name: "docker-compose"
      detection: ["docker-compose.yml", "docker-compose.yaml"]
      description: "Multi-container Docker applications"
      examples:
        - "docker-compose up"
        - "docker-compose down"
        - "docker-compose build"
    - name: "podman"
      detection: ["Containerfile", "podman-compose.yml"]
      description: "Container engine"
      examples:
        - "podman build -t app ."
        - "podman run app"

  task_runners:
    - name: "make"
      detection: ["Makefile"]
      description: "Build automation tool"
      examples:
        - "make build"
        - "make test"
        - "make clean"
    - name: "just"
      detection: ["justfile"]
      description: "Command runner"
      examples:
        - "just build"
        - "just test"
        - "just run"

# Tool detection rules
detection_rules:
  # Priority order for tool detection
  priority_order:
    - "package_managers"
    - "build_tools"
    - "test_frameworks"
    - "lint_tools"
    - "container_tools"
    - "task_runners"

  # File patterns that indicate project type
  project_indicators:
    python:
      - "*.py"
      - "pyproject.toml"
      - "requirements.txt"
      - "setup.py"
    javascript:
      - "*.js"
      - "*.ts"
      - "*.jsx"
      - "*.tsx"
      - "package.json"
    go:
      - "*.go"
      - "go.mod"
      - "go.sum"
    rust:
      - "*.rs"
      - "Cargo.toml"
      - "Cargo.lock"

# Command validation rules
validation_rules:
  # Commands that should be validated before execution
  require_validation:
    - "rm -rf"
    - "sudo"
    - "chmod"
    - "chown"

  # Safe commands that don't need validation
  safe_commands:
    - "ls"
    - "cat"
    - "head"
    - "tail"
    - "grep"
    - "find"
    - "echo"
    - "pwd"
    - "cd"

# Fallback mechanisms
fallbacks:
  # When tool detection fails, use these defaults
  default_tools:
    python: "python -m"
    javascript: "npm run"
    go: "go"
    rust: "cargo"

  # Alternative commands when primary tool unavailable
  alternatives:
    python:
      uv: ["poetry run", "python -m"]
      poetry: ["uv run", "python -m"]
    javascript:
      nx: ["npm run", "yarn", "pnpm"]
      npm: ["yarn", "pnpm"]
